#include <stdio.h>

// Structure to represent a process
typedef struct {
    int pid;   // Process ID
    int bt;    // Burst Time
    int wt;    // Waiting Time
    int tat;   // Turnaround Time
} Process;

// Function to calculate waiting time and turnaround time
void findWaitingTime(Process processes[], int n, int quantum) {
    int rem_bt[n];  // Remaining Burst Time
    for (int i = 0; i < n; i++) {
        rem_bt[i] = processes[i].bt;
    }
    
    int t = 0;  // Current time
    while (1) {
        int done = 1;  // To check if all processes are done
        
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;  // If there is any process left to execute
                if (rem_bt[i] > quantum) {
                    t += quantum;
                    rem_bt[i] -= quantum;
                } else {
                    t += rem_bt[i];
                    processes[i].wt = t - processes[i].bt;
                    rem_bt[i] = 0;
                }
            }
        }
        
        if (done == 1) {
            break;
        }
    }
    
    // Calculate turnaround time
    for (int i = 0; i < n; i++) {
        processes[i].tat = processes[i].bt + processes[i].wt;
    }
}

// Function to calculate average waiting time and turnaround time
void findAverageTime(Process processes[], int n) {
    int total_wt = 0, total_tat = 0;

    for (int i = 0; i < n; i++) {
        total_wt += processes[i].wt;
        total_tat += processes[i].tat;
    }

    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].bt, processes[i].wt, processes[i].tat);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}

int main() {
    Process processes[] = {
        {1, 6, 0, 0},
        {2, 8, 0, 0},
        {3, 7, 0, 0},
        {4, 3, 0, 0}
    };
    int n = sizeof(processes) / sizeof(processes[0]);
    int quantum = 4;  // Time quantum

    findWaitingTime(processes, n, quantum);
    findAverageTime(processes, n);

    return 0;
}
