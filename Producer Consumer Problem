#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define BUFFER_SIZE 5  // Buffer size
#define NUM_ITEMS 10   // Number of items to produce/consume

int buffer[BUFFER_SIZE];  // Shared buffer
int in = 0, out = 0;      // Indices for producer and consumer
pthread_mutex_t mutex;     // Mutex for critical section
pthread_cond_t not_empty;  // Condition variable to signal when buffer is not empty
pthread_cond_t not_full;   // Condition variable to signal when buffer is not full

// Producer thread function
void* producer(void* param) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        pthread_mutex_lock(&mutex);  // Enter critical section

        // Wait if the buffer is full
        while ((in + 1) % BUFFER_SIZE == out) {
            pthread_cond_wait(&not_full, &mutex);
        }

        // Produce an item and add it to the buffer
        buffer[in] = i + 1;
        printf("Produced: %d\n", buffer[in]);
        in = (in + 1) % BUFFER_SIZE;  // Update the index for next insertion

        // Signal that the buffer is not empty (Consumer can consume)
        pthread_cond_signal(&not_empty);

        pthread_mutex_unlock(&mutex);  // Exit critical section
        sleep(1);  // Simulate time taken to produce an item
    }
    return NULL;
}

// Consumer thread function
void* consumer(void* param) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        pthread_mutex_lock(&mutex);  // Enter critical section

        // Wait if the buffer is empty
        while (in == out) {
            pthread_cond_wait(&not_empty, &mutex);
        }

        // Consume an item from the buffer
        int item = buffer[out];
        printf("Consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;  // Update the index for next consumption

        // Signal that the buffer is not full (Producer can produce)
        pthread_cond_signal(&not_full);

        pthread_mutex_unlock(&mutex);  // Exit critical section
        sleep(1);  // Simulate time taken to consume an item
    }
    return NULL;
}

int main() {
    pthread_t prod_thread, cons_thread;

    // Initialize mutex and condition variables
    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&not_empty, NULL);
    pthread_cond_init(&not_full, NULL);

    // Create producer and consumer threads
    pthread_create(&prod_thread, NULL, producer, NULL);
    pthread_create(&cons_thread, NULL, consumer, NULL);

    // Wait for both threads to finish
    pthread_join(prod_thread, NULL);
    pthread_join(cons_thread, NULL);

    // Clean up
    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&not_empty);
    pthread_cond_destroy(&not_full);

    return 0;
}
