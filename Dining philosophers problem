#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

// Mutex for each fork
pthread_mutex_t forks[NUM_PHILOSOPHERS];

// Function for philosophers to think and eat
void* philosopher(void* num) {
    int id = *((int*)num);  // Philosopher's ID
    int left_fork = id;  // Left fork (index is the philosopher's id)
    int right_fork = (id + 1) % NUM_PHILOSOPHERS;  // Right fork (next philosopher)

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking...\n", id);
        sleep(1);

        // Picking up forks (left first, then right)
        printf("Philosopher %d is hungry and trying to pick up forks...\n", id);
        pthread_mutex_lock(&forks[left_fork]);
        printf("Philosopher %d picked up left fork %d\n", id, left_fork);

        pthread_mutex_lock(&forks[right_fork]);
        printf("Philosopher %d picked up right fork %d\n", id, right_fork);

        // Eating
        printf("Philosopher %d is eating...\n", id);
        sleep(2);

        // Putting down forks
        pthread_mutex_unlock(&forks[left_fork]);
        printf("Philosopher %d put down left fork %d\n", id, left_fork);

        pthread_mutex_unlock(&forks[right_fork]);
        printf("Philosopher %d put down right fork %d\n", id, right_fork);

        // Thinking again
        printf("Philosopher %d is thinking...\n", id);
    }

    return NULL;
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    // Initialize mutexes for the forks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        if (pthread_create(&threads[i], NULL, philosopher, &philosopher_ids[i]) != 0) {
            perror("Thread creation failed");
            exit(1);
        }
    }

    // Join threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Clean up mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
