#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 10

// Function to implement SCAN Disk Scheduling Algorithm
void scanDiskScheduling(int requests[], int numRequests, int initialPosition, int diskSize, int direction) {
    int totalSeekTime = 0;
    int currentPosition = initialPosition;
    int seekCount = 0;

    // Sort the request array to service requests in order
    // Sort the request array to handle requests in order
    for (int i = 0; i < numRequests - 1; i++) {
        for (int j = i + 1; j < numRequests; j++) {
            if (requests[i] > requests[j]) {
                // Swap the elements
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }

    // Find the position to start scanning
    int startIndex = 0;
    for (int i = 0; i < numRequests; i++) {
        if (requests[i] > currentPosition) {
            startIndex = i;
            break;
        }
    }

    // Print initial state
    printf("SCAN Disk Scheduling\n");
    printf("Initial Position: %d\n", initialPosition);
    printf("Request Sequence: ");
    for (int i = 0; i < numRequests; i++) {
        printf("%d ", requests[i]);
    }
    printf("\n");

    printf("\nService Order:\n");

    if (direction == 1) { // Move right initially
        // Move to the rightmost request
        for (int i = startIndex; i < numRequests; i++) {
            int seekTime = abs(requests[i] - currentPosition);
            totalSeekTime += seekTime;
            printf("Move from %d to %d (Seek Time: %d)\n", currentPosition, requests[i], seekTime);
            currentPosition = requests[i];
        }

        // Now move to the end and reverse the direction
        if (currentPosition != diskSize - 1) {
            int seekTime = abs(diskSize - 1 - currentPosition);
            totalSeekTime += seekTime;
            printf("Move from %d to %d (Seek Time: %d)\n", currentPosition, diskSize - 1, seekTime);
            currentPosition = diskSize - 1;
        }

        // Move back in the opposite direction
        for (int i = startIndex - 1; i >= 0; i--) {
            int seekTime = abs(requests[i] - currentPosition);
            totalSeekTime += seekTime;
            printf("Move from %d to %d (Seek Time: %d)\n", currentPosition, requests[i], seekTime);
            currentPosition = requests[i];
        }
    } else { // Move left initially
        // Move to the leftmost request
        for (int i = startIndex - 1; i >= 0; i--) {
            int seekTime = abs(requests[i] - currentPosition);
            totalSeekTime += seekTime;
            printf("Move from %d to %d (Seek Time: %d)\n", currentPosition, requests[i], seekTime);
            currentPosition = requests[i];
        }

        // Now move to the beginning and reverse the direction
        if (currentPosition != 0) {
            int seekTime = abs(0 - currentPosition);
            totalSeekTime += seekTime;
            printf("Move from %d to %d (Seek Time: %d)\n", currentPosition, 0, seekTime);
            currentPosition = 0;
        }

        // Move back in the opposite direction
        for (int i = startIndex; i < numRequests; i++) {
            int seekTime = abs(requests[i] - currentPosition);
            totalSeekTime += seekTime;
            printf("Move from %d to %d (Seek Time: %d)\n", currentPosition, requests[i], seekTime);
            currentPosition = requests[i];
        }
    }

    // Print the total seek time
    printf("\nTotal Seek Time: %d\n", totalSeekTime);
}

int main() {
    // Array of disk requests (cylinder numbers)
    int requests[MAX_REQUESTS] = {98, 183, 37, 122, 14, 124, 65, 67};
    
    int numRequests = 8;  // Number of requests
    int initialPosition = 53;  // Initial position of the disk arm
    int diskSize = 200;  // Total number of cylinders on the disk (size of disk)
    int direction = 1;  // Initial direction: 1 for right, 0 for left
    
    // Call the SCAN disk scheduling function
    scanDiskScheduling(requests, numRequests, initialPosition, diskSize, direction);

    return 0;
}
